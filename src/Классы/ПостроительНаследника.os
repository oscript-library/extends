#Использовать annotations
#Использовать decorator
#Использовать reflector

Перем _КонтейнерАннотаций;

Перем _ОбъектНаследник;
Перем _ОбъектРодитель;
Перем _МетодыНаследника;
Перем _КонструкторНаследника;
Перем _РефлекторОбъекта;

Функция СоздатьДекоратор() Экспорт

	Если _КонтейнерАннотаций = Неопределено Тогда
		_КонтейнерАннотаций = Новый КонтейнерАннотаций();
		_КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияРасширяет"));
	КонецЕсли;
	
	Если _МетодыНаследника = Неопределено Тогда
		МетодыНаследника = _РефлекторОбъекта.ПолучитьТаблицуМетодов(Неопределено, Ложь);
	Иначе
		МетодыНаследника = _МетодыНаследника;
	КонецЕсли;
	Если _КонструкторНаследника = Неопределено Тогда
		КонструкторНаследника = РаботаСАннотациями.НайтиМетодыСАннотацией(МетодыНаследника, "Расширяет")[0];
	Иначе
		КонструкторНаследника = _КонструкторНаследника;
	КонецЕсли;
	
	ОпределениеАннотацииРасширяет = _КонтейнерАннотаций.ПолучитьОпределениеАннотации("Расширяет");
	АннотацияРасширяет = РаботаСАннотациями.НайтиАннотацию(КонструкторНаследника.Аннотации, "Расширяет");
	
	ОбъектАннотацииРасширяет = ОпределениеАннотацииРасширяет.СоздатьОбъектАннотации(АннотацияРасширяет);

	ИмяТипаРодителя = ОбъектАннотацииРасширяет.ИмяТипаРодителя();
	РефлекторОбъектаРодителя = Новый РефлекторОбъекта(Тип(ИмяТипаРодителя));
	МетодыРодителя = РефлекторОбъектаРодителя.ПолучитьТаблицуМетодов(Неопределено, Ложь);
	
	Декоратор = Новый ПостроительДекоратора(_ОбъектНаследник);

	ИмяПоляОбъектРодитель = ИмяПоляОбъектРодитель();
	Если _РефлекторОбъекта.ЕстьСвойство(ИмяПоляОбъектРодитель) Тогда
		Рефлектор = Новый Рефлектор();
		Рефлектор.УстановитьСвойство(_ОбъектНаследник, ИмяПоляОбъектРодитель, _ОбъектРодитель);
	Иначе
		Поле = Новый Поле(ИмяПоляОбъектРодитель)
			.ЗначениеПоУмолчанию(_ОбъектРодитель);
	
		Декоратор.Поле(Поле);
	КонецЕсли;

	Для Каждого МетодРодителя Из МетодыРодителя Цикл
		
		Если НЕ МетодРодителя.Экспорт Тогда
			Продолжить;
		КонецЕсли;

		Если МетодРодителя.ЭтоФункция И _РефлекторОбъекта.ЕстьФункция(МетодРодителя.Имя, МетодРодителя.КоличествоПараметров) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ МетодРодителя.ЭтоФункция И _РефлекторОбъекта.ЕстьПроцедура(МетодРодителя.Имя, МетодРодителя.КоличествоПараметров) Тогда
			Продолжить;
		КонецЕсли;

		Метод = Новый Метод(МетодРодителя.Имя).Публичный();

		ПеренестиАннотации(Метод, МетодРодителя.Аннотации);
		
		ИменаПараметров = Новый Массив;
		Для Каждого ПараметрРодителя Из МетодРодителя.Параметры Цикл
			ПараметрМетода = ПараметрМетодаИзДанныхРефлектора(ПараметрРодителя);
			Метод.Параметр(ПараметрМетода);

			ИменаПараметров.Добавить(ПараметрРодителя.Имя);
		КонецЦикла;
		СтрокаПараметры = СтрСоединить(ИменаПараметров, ", ");
		
		ТелоМетода = ИмяПоляОбъектРодитель + "." + МетодРодителя.Имя + "(" + СтрокаПараметры + ");";
		Если МетодРодителя.ЭтоФункция Тогда
			ТелоМетода = "Возврат " + ТелоМетода;
		Иначе
			Метод.ЭтоПроцедура();
		КонецЕсли;
		Метод.ТелоМетода(ТелоМетода);

		Декоратор.Метод(Метод);

	КонецЦикла;

	// Перенос конструктора
	КонструкторРодителя = МетодыРодителя.Найти("ПриСозданииОбъекта", "Имя");

	Если КонструкторРодителя <> Неопределено Тогда
		Метод = Новый Метод(КонструкторНаследника.Имя).ЭтоПроцедура();
		
		ПеренестиАннотации(Метод, КонструкторНаследника.Аннотации, "Расширяет");
		
		Если КонструкторРодителя <> Неопределено Тогда
			ПеренестиАннотации(Метод, КонструкторРодителя.Аннотации, "Расширяет");
		КонецЕсли;

		Декоратор.Метод(Метод);
	КонецЕсли;
	
	ПредставлениеТипа = "" + ТипЗнч(_ОбъектНаследник) + "_Расширяет_" + ИмяТипаРодителя;
	Метод = Новый Метод("ОбработкаПолученияПредставления")
		.ЭтоПроцедура()
		.Параметр(Новый ПараметрМетода("Представление"))
		.Параметр(Новый ПараметрМетода("СтандартнаяОбработка"))
		.ТелоМетода("СтандартнаяОбработка = Ложь; Представление = """ + ПредставлениеТипа + """;");
	Декоратор.Метод(Метод);

	Возврат Декоратор;

КонецФункции

// Получить имя поля, в котором хранится объект-родитель.
// Возвращается имя поля, помеченное аннотацией &Родитель, или "_ОбъектРодитель", если аннотация не найдена.
//
// Возвращаемое значение:
//   Строка
//
Функция ИмяПоляОбъектРодитель() Экспорт

	СвойстваНаследника_Родитель = _РефлекторОбъекта.ПолучитьТаблицуСвойств("Родитель", Истина);
	Если СвойстваНаследника_Родитель.Количество() = 0 Тогда
		Возврат "_ОбъектРодитель";
	Иначе
		Возврат СвойстваНаследника_Родитель[0].Имя;
	КонецЕсли;

КонецФункции

Функция Построить() Экспорт

	Возврат СоздатьДекоратор().Построить();

КонецФункции

Процедура УстановитьКонтейнерАннотаций(КонтейнерАннотаций) Экспорт
	_КонтейнерАннотаций = КонтейнерАннотаций;
КонецПроцедуры

Процедура ПеренестиАннотации(МетодИлиПараметр, Аннотации, ИмяИсключаемойАннотации = "")
	Для Каждого ДанныеАннотации Из Аннотации Цикл
		Если ВРег(ДанныеАннотации.Имя) = ВРег(ИмяИсключаемойАннотации) Тогда
			Продолжить;
		КонецЕсли;

		Аннотация = АннотацияИзДанныхРефлектора(ДанныеАннотации);
		МетодИлиПараметр.Аннотация(Аннотация);
	КонецЦикла;
КонецПроцедуры

Функция ПараметрМетодаИзДанныхРефлектора(Параметр)

	ПараметрМетода = Новый ПараметрМетода(Параметр.Имя);
	Если Параметр.ПоЗначению Тогда
		ПараметрМетода.ПоЗначению();
	КонецЕсли;
	Если Параметр.ЕстьЗначениеПоУмолчанию Тогда
		ПараметрМетода.ЗначениеПоУмолчанию(Параметр.ЗначениеПоУмолчанию);
	КонецЕсли;

	ПеренестиАннотации(ПараметрМетода, Параметр.Аннотации);

	Возврат ПараметрМетода;

КонецФункции

Функция АннотацияИзДанныхРефлектора(ДанныеАннотации)
	
	Аннотация = Новый Аннотация(ДанныеАннотации.Имя);
	Для Каждого Параметр Из ДанныеАннотации.Параметры Цикл
		Аннотация.Параметр(Параметр.Значение, Параметр.Имя);
	КонецЦикла;

	Возврат Аннотация;

КонецФункции

Процедура ПриСозданииОбъекта(ОбъектНаследник, ОбъектРодитель, МетодыНаследника = Неопределено, КонструкторНаследника = Неопределено)
	_ОбъектНаследник = ОбъектНаследник;
	_ОбъектРодитель = ОбъектРодитель;
	_МетодыНаследника = МетодыНаследника;
	_КонструкторНаследника = КонструкторНаследника;

	_РефлекторОбъекта = Новый РефлекторОбъекта(_ОбъектНаследник);
КонецПроцедуры
